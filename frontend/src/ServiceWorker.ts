/// <reference lib="webworker" />
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
	CacheFirst,
	NetworkFirst,
	StaleWhileRevalidate,
} from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

// Use the precache manifest generated by VitePWA
precacheAndRoute(self.__WB_MANIFEST);

// Cache API responses
registerRoute(
	({ url }) => url.pathname.startsWith("/api"),
	new NetworkFirst({
		cacheName: "api-cache",
		plugins: [
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 60 * 60 * 24, // 1 day
			}),
		],
	}),
);

// Cache assets
registerRoute(
	({ request }) =>
		request.destination === "image" || request.destination === "style",
	new CacheFirst({
		cacheName: "assets-cache",
		plugins: [
			new ExpirationPlugin({
				maxEntries: 60,
				maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
			}),
		],
	}),
);

// Fallback for navigation requests
registerRoute(
	({ request }) =>
		request.destination === "script" || request.destination === "style",
	new StaleWhileRevalidate({
		cacheName: "static-resources",
	}),
);

// Fallback page for when offline and navigation fails
self.addEventListener("fetch", (event) => {
	if (event.request.mode === "navigate") {
		event.respondWith(
			fetch(event.request).catch(() => {
				return caches.match("/offline.html").then((response) => {
					// Return the offline page if found in cache, otherwise return a simple offline response
					return (
						response ||
						new Response("You are offline. Please check your connection.", {
							status: 503,
							statusText: "Service Unavailable",
							headers: new Headers({
								"Content-Type": "text/html",
							}),
						})
					);
				});
			}),
		);
	}
});
