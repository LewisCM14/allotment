{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is the design documentation for a web application designed for allotment holders looking to optimize their growing season. The system provides a dynamic, personalized to-do list, helping users stay on top of crucial tasks like watering, feeding, pruning, and harvesting. Along with a collaborative grow guide database, allowing users to share and discover the best techniques for different fruit and vegetable varieties.</p> <p>Please Note</p> <p>The purpose of this documentation is twofold:</p> <ul> <li>Act as the documentation that details the implemented solution.</li> <li>Provide a blueprint for creating the system from the ground up.</li> </ul> <p>Due to this, all sections detailing requirements are written in the past tense, and detail what the system should do. The proceeding sections after ones detailing requirements then lays out how they are realized in the currently deployed solution, and as such are present tense. Providing both the documentation on the implemented solution and the blueprint for re-creating it if desired. Architectural Decision Records (ADRs) are also recorded, providing justification and reasoning for technologies chosen.</p> <p>Info</p> <p>Information on how to set up the project locally can be found at the root of the repository in <code>CONTRIBUTING.md</code> or through GitHub.</p> <p>Info</p> <p>Licensing information can be found at the root of the repository in <code>LICENSE.txt</code> or through GitHub.</p>"},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#authentication-requirements","title":"Authentication Requirements","text":"<p>The application is to contain a minimal amount of personal data. But, whilst minimal, users: emails, postal codes and passwords still require strong protective measures in place and steps to prevent users grow guides from being tampered with must be taken.</p> <p>As with all other aspects of the application the solution must run on Linux based operating systems and be free for commercial use. Whilst integrating with the modular architecture and able to scale appropriately. It must also be able to run alongside FastAPI &amp; PostgreSQL in a PWA that utilizes a modern front end framework for its user interface.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with PostgreSQL &amp; FastAPI.</p> </li> <li>Will need to integrate with a modern front end framework in order to deliver a progressive web app (PWA).</li> <li>Must accommodate Representational State Transfer (REST) architectural design principles.</li> <li>Must be able to support offline capabilities as allotments can be in areas of poor signal.</li> <li>Passwords are not to be stored as plain text.</li> <li>Client side request are to be made with HTTPS to ensure data is encrypted in transit.</li> </ul> <p>Please Note</p> <p>There is currently only a need to authenticate users within the application as all admin owned data is to be managed at the data base layer, meaning an authorization solution is not required. However, the ability to implement a method of authorization in order to support admin activity later on must also be considered.</p>"},{"location":"authentication/#authentication-adr","title":"Authentication ADR","text":"<p>Decision record for the authentication solution the application is to utilize. The chosen solution, as with all other aspects of the application, must run on Linux based operating systems and be free for commercial use. Whilst integrating with the modular architecture and able to scale appropriately. It must also be able to run alongside FastAPI &amp; PostgreSQL in a PWA that utilizes a modern front end framework for its user interface.</p> <p>Outcome</p> <ul> <li> <p>Json Web Tokens (JWT)</p> <ul> <li> <p>Users will authenticate with a email and password. The backend is to then issue a JWT token that the client includes in subsequent requests. This token contains users claims and is verified on each request. This method of stateless authentication is well suited to scalable APIs however it does require the management of JWT on the client side.</p> </li> <li> <p>fastapi.security and Authlib are packages within the FastAPI ecosystem that supports this method of authorization. </p> <p>Info</p> <p>PyJWT is a lightweight alternative to Authlib, however it does not currently handle OAuth2 providers, excluding it from consideration in this use case as an external OAuth2 provider might be desirable in the future. Authlib also provides excellent offline capabilities in line with product requirements.</p> Future Improvement <p>Whilst not an immediate requirement, this solution also offers the ability to implement the ability to revoke and blacklist access tokens in the event of a breach. Something that ensures a scalability.</p> </li> </ul> </li> </ul> Alternatives <ol> <li> <p>Session-Based Authentication</p> <ul> <li> <p>Users will log in and the sever will store and manage session data. A session cookie is then sent to the client and the cookie is validated on each request. This method of authorization is relatively simple when compared to using JWT's, as the browser handles cookies. It is not as scalable long term though.</p> </li> <li> <p>fastapi-users and Starlette Session Middleware are packages within the FastAPI ecosystem that supports this method of authorization.  </p> </li> </ul> </li> <li> <p>OAuth2 &amp; JWTs with External Providers</p> <ul> <li> <p>Similar to OAuth2 with JWTs, users authenticate with an external provider (i.e. google, GitHub etc). This provider then issues an access token and the API verifies the token and retrieves user information with each request.</p> </li> <li> <p>Again Authlib can be used to facilitate this process alongside fastapi-login. However, it places an added dependency, that opens the door to requiring the ability to support the various third party providers out there.</p> </li> </ul> </li> </ol>"},{"location":"client_side/","title":"Client Side","text":""},{"location":"client_side/#client-side-requirements","title":"Client Side Requirements","text":"<p>The aim with the client side of the application, like the database and server side layers is to support the applications overall modular design by not being tightly coupled to the other architecture layers, whilst still enforcing data consistency and integrity. </p> <p>All while delivering a progressive web application experience to many concurrent end users by supporting offline capabilities in an accessible mobile first application with a simple yet effective user interface.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with a RESTful API written using the FastAPI framework.</p> </li> <li>Must be able to handle JWTs for user authentication provided from the sever side via fastapi.security and Authlib.</li> <li>Must be able to facilitate the creation of a Progressive Web App.</li> <li>Must be able to provide type safety and complete form validation for data consistency and integrity across the application.</li> <li>Must be able to provide offline capabilities and caching in order to accommodate users with allotments in low signal areas.</li> </ul> <p>Info</p> <p>There is currently no need for heavy data synchronization between the front and backend.</p> <p>The only required global state is authentication state, everything else is handled via component based state.</p> <p>Future Improvement</p> <p>Whilst the need for real time updates via push notifications is beyond the scope of a minimal viable product. The ability to deliver upon this is desired long term in order to create a feature rich application.</p> <p>Testing Considerations:</p> <ul> <li>Integration tests against the API are to be prioritized as these provide the most benefit in ensuring the modular architecture pieces together. </li> <li>In the instance custom components are created the testing of these should be prioritized over components built using the supporting tech stack.</li> </ul> <p>Info</p> <p>Testing the happy pathway is to be prioritized and deemed sufficient unless a bug is discovered that steers the application away from intended functionality. In this instance a test confirming the bug is no longer present is to be written first before a resolution is implemented, following Test Driven Development (TDD) principles and allowing for an automated check that the ensures the application does not regress in the future.</p>"},{"location":"client_side/#interfaces","title":"Interfaces","text":"<p>High level interface functionality accompanied by low fidelity designs.</p> <p></p>"},{"location":"client_side/#user-account-interfaces","title":"User Account Interfaces","text":"<p>High Priority</p> User Registration InterfaceUser Login InterfaceUser Owned Grow Guide InterfaceUser Allotment InterfaceUser Preference InterfaceUser Logout Interface <ul> <li>Ability for users to register an account within the application using an email address and password.<ul> <li>Users must also provide a first name and country code.</li> <li>Emails must be unique and signing up with an existing one triggers an error message for the user.</li> </ul> </li> </ul> <ul> <li>Ability for users to sign into the application via email and password<ul> <li>Ability for users to request a password reset.</li> <li>Ability for users to trigger the registration window if they do not have an account.</li> </ul> </li> </ul> <ul> <li>A interface to list a users currently owned grow guides with a flow for activating/deactivating a guide. As well as a flow for deleting a guide that is behind a \"are you sure\" style confirmation. </li> <li>The individual items in the list are navigation links that lead to a dedicated interface for displaying the grow guide.</li> <li>The interface provides a flow for creating a new grow guide.</li> <li>The interface includes a toggle that provides users with the ability to make a guide public or private.</li> </ul> <ul> <li>Ability for users to create an associated allotment by providing the following information: postal code, width and length.<ul> <li>Initially this interface is populated with placeholder text until a user submits the required information to create an associated allotment.</li> </ul> </li> <li>Ability for users to update the following information for their allotment: postal code, width and length.</li> </ul> Future Improvement <p>Further interfaces relating to a users allotment will be required when implementing the functionality to provide planting recommendations.</p> <ul> <li>Ability for users to nominate a day for for giving each type of feed.</li> </ul> <ul> <li>Ability for users to sign out the application</li> </ul> <p>Medium Priority</p> User Profile InterfaceUser Password Reset Interface <ul> <li>Ability for users to view &amp; update their: first name, password and country code. This interface will also display a users registered email address and verification status. With the ability to request a verification email be sent.</li> </ul> <ul> <li>Ability for users to enter a new password, after having come from the magic link provided via email to their registered address.</li> </ul> <p>Low Priority</p> User Notification Interface <ul> <li>The ability for users to control: type, method and frequency of notifications they receive. </li> </ul> <p>Please Note</p> <p>This is a low priority as automated notifications are not part of the minimal viable product. Additional database tables will also be required for storing a users nominated preferences to provide this functionality. </p>"},{"location":"client_side/#family-interfaces","title":"Family Interfaces","text":"<p>Medium Priority</p> Botanical Group List InterfaceFamily Information Interface <ul> <li>A interface that lists the different botanical groups available within the application. Where each group is a dropdown that can be select to expand/collapse. When expanded it displays the families within that group below a recommend rotate years info section.<ul> <li>Each heading within the dropdown is a navigation link to a page informing on that family in detail.</li> </ul> </li> </ul> <ul> <li>A interface that displays the surrounding information for a specific family of fruit or vegetables. <ul> <li>The first section of information includes the families: Botanical Group, Recommended Rotation Years, Companion &amp; Antagonist families.</li> <li>The second section of information includes the common pests that effect the family and their treatment and prevention methods.</li> <li>The third section of information includes the common disease that effect the family and their: symptoms, treatment and prevention methods.</li> </ul> </li> </ul>"},{"location":"client_side/#grow-guide-interfaces","title":"Grow Guide Interfaces","text":"<p>High Priority</p> Grow Guide <ul> <li>A interface that presents the user with a overview of a specific varieties grow guide. This interface doubles up as the form for creating/editing the grow guide also.<ul> <li>For guides a user own there is a button that unlocks the guide for editing.<ul> <li>This mode includes methods of ensuring users pass validation per field of the form and a method of handling submissions failures in a friendly way.</li> </ul> </li> </ul> </li> </ul> <p>Low Priority</p> Public Grow Guides <ul> <li>A interfaces that lists all the publicly available grow guides for users to browse and use. As an initial offering this screen organizes the available grow guides into botanical groups that are alphabetically sorted and the guides within each group are alphabetized again.</li> </ul> Future Improvement <p>Long term this interface will want comprehensive search and filter functionality. PostgreSQL's tsvector will likely form part of this solution.</p> Future Improvement <p>When implemented, user interfaces for generating and viewing planting recommendations will also be required.</p>"},{"location":"client_side/#todo-interfaces","title":"ToDo Interfaces","text":"<p>High Priority</p> Weekly ToDo <ul> <li> <p>The interface that is considered the home page. This view displays, based on a users active varieties, their weekly tasks and where appropriate these weekly tasks are to be broken down into there specific days.</p> <ul> <li> <p>Weekly Tasks:</p> <ul> <li>What varieties can be sown.</li> <li>What varieties can be transplanted.</li> <li>What varieties can be harvested.</li> <li>What varieties need to be pruned.</li> <li>What varieties can be dug up and composted.<ul> <li>This task is based of when a variety has reached the end of its harvest period and lifecycle.</li> </ul> </li> </ul> </li> <li> <p>Daily Tasks:</p> <ul> <li>What varieties need to be fed this week on what day.<ul> <li>Varieties that are to be fed, are grouped by feed type and this feed type highlighted.</li> </ul> </li> <li>What varieties need to be watered this week on what day.     ???+ tip \"Future Improvement\"         Long term this task will be dictated via a live weather feed based on the users allotment postal/zip code.</li> </ul> </li> </ul> </li> <li> <p>Each user is able to select a desired week in order to view the past or future, with the default load week set to the present week.</p> </li> </ul> <p>Low Priority</p> Monthly ToDo <ul> <li>This view displays a high level overview based on a users active varieties, their monthly tasks, grouped by season.<ul> <li>These tasks are to include:<ul> <li>What varieties can be sown.</li> <li>What varieties can be transplanted.</li> <li>What varieties can be harvested.</li> <li>What varieties need to be pruned.</li> <li>What varieties can be dug up and composted.</li> </ul> </li> </ul> </li> <li>Each user is able to select a month in order to view the past or future, with the default load month set to the present.</li> </ul>"},{"location":"client_side/#client-side-adr","title":"Client Side ADR","text":"<p>There are several aspects to consider when deciding on the appropriate technologies to meet the client side requirements of the application. On top of adhering to the modular architecture principles, just as the rest of the application, with a solution that runs on Linux based operation systems using packages and libraries that are free for commercial use, that integrate with a FastAPI RESTful API that uses JWT for authentication, all whilst delivering a progressive web application experience to many concurrent users the individual layers of the client side must also be considered in isolation.</p> <p>Outcome</p> <p>Framework:</p> <ul> <li>React with TypeScript<ul> <li>React is a well suited framework for developing progressive web applications that allows for a component based architecture, with several state management options, that aligns well with the applications modular design. The frameworks strong support of TypeScript also allows for the enforcement of good data integrity.</li> <li>React hooks like useAuth and useContext also work well with the Authlib &amp; JWT authentication flow proposed in the server side solution.</li> </ul> </li> </ul> <p>UI Library:</p> <ul> <li>Tailwind CSS &amp; Shadcn<ul> <li>Tailwind provides utility first CSS, keeping styling modular and scalable. Its pairing with Shadcn allows for the provision of accessible, modern UI components.</li> </ul> </li> </ul> <p>State Management:</p> <ul> <li>React Query &amp; Context API<ul> <li>As the application will mostly fetch and cache data and there is no requirement for heavy real-time collaboration React Query is sufficient to provide caching for offline mode and the Context API will manage small, app wide states, like authentication.</li> </ul> </li> </ul> <p>API Communication:</p> <ul> <li>Fetch with Axios<ul> <li>Axios provides good error handling with automatic request/response transformation and built in request cancellation. Making it worth the complexity trade off when compared to the native Fetch API.</li> </ul> </li> </ul> <p>PWA Support:</p> <ul> <li>Workbox &amp; IndexedDB<ul> <li>Workbox will generate a service worker for caching API responses in the client side IndexedDB (IDB). With support for background sync.</li> </ul> </li> </ul> <p>Form Handling:</p> <ul> <li>React Hook Form &amp; Zod<ul> <li>The application requires robust form validation for user-generated content. React Hook will reduce re-renders and improve performance, integrating well with TypeScript. Zod will provide a schema based validation that works with well with React Hook Form.</li> </ul> </li> </ul> Alternatives <p>Framework:</p> <ol> <li> <p>Vue3 with TypeScript</p> <ul> <li>A close second option. Whilst Vue offers simpler state management when compared to React and a cleaner two-way binding for forms, plus arguably better built in support for PWA's. It is a smaller eco system that is less performant for large scale applications.</li> </ul> </li> <li> <p>SvelteKit</p> <ul> <li>Svelte kit offers great performance as it compiles to vanilla JS, offering minimal runtime overhead. It also has build in support for PWAs. However, it is a immature framework with a weaker ecosystem when compared to React &amp; Vue. This is potentially a strong option if the application develops a requirement to have an extremely small runtime overhead in order to vertically scale.</li> </ul> </li> </ol> <p>UI Library:</p> <ol> <li>MUI (Material UI)<ul> <li>MUI is a feature rich component library created by Google that provides a polished UI out the box. However, it is extremely heavyweight and less customable compared to Tailwind &amp; Shadcn.</li> </ul> </li> </ol> <p>State Management:</p> <ol> <li>Redux<ul> <li>Redux is a global state management tool that scales well with strong developer tooling. The overhead is larger when compared to React Query &amp; Context API. It is also not ideal for caching. As the application does not require extensive global state management but does require extensive caching it is not a strong choice.</li> </ul> </li> </ol> <p>API Communication:</p> <ol> <li>GraphQL (Apollo Client)<ul> <li>Not a realistic choice as the server side of the application is optimized for a REST API. In the event the application migrates to a GraphQL API this would provide efficient data fetching by reducing over/under fetching issues seen in REST APIs.</li> </ul> </li> </ol> <p>PWA Support:</p> <ol> <li>Service Workers without Workbox<ul> <li>Whilst this would provide full control and remove a dependency it would increase the probability of errors.</li> </ul> </li> </ol> <p>Form Handling:</p> <ol> <li>Yup<ul> <li>Whilst Yup is a potential alternative to Zod it is less TypeScript friendly and not as flexible.</li> </ul> </li> </ol>"},{"location":"client_side/#client-side-design","title":"Client Side Design","text":""},{"location":"client_side/#components","title":"Components","text":"<p>Container-Presenter Pattern</p> <p>In order to keep the components listed below clean and separate logic from presentation, the container presenter pattern is utilized. Allowing for a \"smart\" container component to handle state, API calls and business logic with a \"dumb\" presenter component created in order to display data. This pattern also prevents re-renders when only the UI changes, improving performance.</p> <ol> <li>Header</li> <li>Footer</li> <li>Dropdown Component</li> <li>Option Slider</li> <li>Vertical Accordion </li> <li>Information Card</li> <li>Action Table</li> <li>Confirmation Modal</li> <li>Toggle</li> </ol> <p>Factory Pattern</p> <p>Form Component</p> <ul> <li>In order to ensure form validation is correct, inline with the applications data integrity principles, a reusable validation schema (Factory) is defined in a separate file. Within the form component itself this schema is then utilized via Zod and React Hook Form in order to ensure consistent and reusable logic with minimal re-renders.</li> </ul>"},{"location":"client_side/#api-communication","title":"API Communication","text":"<p>Repository Pattern</p> <p>In order to separate API logic from UI, allowing for cleaner components, easier endpoint switching and the reduction of redundant calls. API logic is stored in its own separate service, within these services Axios is used to handle data retrieval from the server. React Query is then utilized when retrieving data through the service in order to cache queries.</p> <p>Cache-Aside Pattern</p> <p>In order to provide offline capabilities within the application Workbox is used to cache API responses on top of React Query. Improving performance and allowing for a progressive web application.</p>"},{"location":"client_side/#client-side-authentication","title":"Client Side Authentication","text":"<p>Observer &amp; Provider Pattern</p> <p>As user authentication is the only required global state the ContextAPI used in order to setup a auth provider. React Query then observes this provider in order to update application state.</p>"},{"location":"client_side/#folder-structure","title":"Folder Structure","text":"<p>Feature-Based Folder Structure</p> <p>Due to the application having clearly defined interfaces that can be grouped into features, a feature based folder structure makes sense, allowing related logic to be kept together.</p> Vite &amp; React Application<pre><code>/frontend\n    /config\n        - Vite specific configuration files.\n    /public\n        - Static assets that are served directly, i.e. a Favicon.\n    /src\n        /assets\n            - Resources that are imported directly into the code, i.e. a logo.\n        /components\n            - Contains components that dictate page layouts.\n            - Contains UI components to use as interface building blocks.\n        /features\n            - /&lt;FEATURE&gt;\n                - /components\n                    - Feature specific components, i.e. containers &amp; presenters.\n                - /forms\n                    - Form schemas and components.\n                - /hooks\n                    - Caching logic (TanStack).\n                - /pages\n                    - Component wrappers that encapsulate the page.\n                - /services\n                    - Feature specific API services.\n        /mocks\n            - Files that support the Frontend test harness.\n        /routes\n            - AppRoutes.tsx\n            - ProtectedRoute.tsx\n            - PublicRoute.tsx\n        /services\n            - api.ts\n            - apiConfig.ts\n            - errorMonitoring.ts\n        /store\n            /auth\n                - AuthContext.tsx\n                - authDB.ts\n                - AuthProvider.tsx\n            /theme\n                - ThemeContext.tsx\n                - ThemeProvider.tsx\n        /types\n            - Common interfaces &amp; types, i.e. NavigationTypes.ts.\n        /utils\n            - Utility files used across the frontend application, i.e. errorUtils.ts.\n        - App.tsx\n        - global.css\n        - main.tsc\n        - ServiceWorker.ts\n        - test-utils.tsx\n        - vite-env.d.ts\n    - .env\n    - components.json\n    - index.html\n    - nginx.conf\n    - package-lock.json\n    - package.json\n    - tsconfig.app.json\n    - tsconfig.json\n    - tsconfig.node.json\n</code></pre>"},{"location":"client_side/#typography","title":"Typography","text":"PrimaryFallback <p>Primary Heading</p> <ul> <li>Oswald</li> </ul> <p>Primary Text</p> <ul> <li>Noto Sans</li> </ul> <p>Fallback Heading</p> <ul> <li>Georgia</li> </ul> <p>Fallback Text</p> <ul> <li>Verdana</li> </ul>"},{"location":"client_side/#color-scheme","title":"Color Scheme","text":"Dark ModeLight ModeInteractions <p>Primary Text/Outline - White</p> <ul> <li>hex #ffffff</li> <li>oklch(100% 0 0)</li> <li> <p>rgb(255 255 255)</p> Tailwind Variables <p>--foreground, --card-foreground, --secondary-foreground, --sidebar-foreground, --popover-foreground, --accent-foreground, --sidebar-accent-foreground, --muted-foreground, --primary foreground, --sidebar-primary-foreground, --border, --sidebar-border,</p> </li> </ul> <p>Primary Dark - Dark Green</p> <ul> <li>hex #3c4a3e</li> <li>oklch(39.29% 0.0269 149.09)</li> <li> <p>rgb(60 74 62)</p> Tailwind Variables <p>--background</p> </li> </ul> <p>Secondary Dark - Black</p> <ul> <li>hex #000000</li> <li>oklch(0% 0 0)</li> <li> <p>rgb(0 0 0)</p> Tailwind Variables <p>--card, --secondary, --sidebar,</p> </li> </ul> <p>Tertiary Dark - Grey</p> <ul> <li>hex #9fafa1</li> <li>oklch(73.74% 0.0267 148.96)</li> <li> <p>rgb(159 175 161)</p> Tailwind Variables <p>--popover, --accent, --sidebar-accent,</p> </li> </ul> <p>Primary Text/Outline - Black</p> <ul> <li>hex #000000</li> <li>oklch(0% 0 0)</li> <li> <p>rgb(0 0 0)</p> Tailwind Variables <p>--foreground, --card-foreground, --secondary-foreground, --sidebar-foreground, --popover-foreground, --accent-foreground, --sidebar-accent-foreground, --muted-foreground, --primary foreground, --sidebar-primary-foreground, --border, --sidebar-border,</p> </li> </ul> <p>Primary Light - Off White</p> <ul> <li>hex #f0f2e6</li> <li>oklch(95.63% 0.016 114.38)</li> <li> <p>rgb(240 242 230)</p> Tailwind Variables <p>--background</p> </li> </ul> <p>Secondary Light - White</p> <ul> <li>hex #ffffff</li> <li>oklch(100% 0 0)</li> <li> <p>rgb(255 255 255)</p> Tailwind Variables <p>--card, --secondary, --sidebar,</p> </li> </ul> <p>Tertiary Light - Sand</p> <ul> <li>hex #81885a</li> <li>oklch(60.91% 0.0657 115.43)</li> <li> <p>rgb(129 136 90)</p> Tailwind Variables <p>--popover, --accent, --sidebar-accent,</p> </li> </ul> <p>Primary Active - Green</p> <ul> <li>hex #007333</li> <li>oklch(48.56% 0.133153 150.185)</li> <li> <p>rgb(0 115 51)</p> Tailwind Variables <p>--primary, --sidebar-primary,</p> </li> </ul> <p>Positive Action - Light Green</p> <ul> <li>hex #007a4e</li> <li>oklch(51.11% 0.116394 159.5934)</li> <li> <p>rgb(0 122 78)</p> Tailwind Variables <p>--input, --ring, --sidebar-ring,</p> </li> </ul> <p>Neutral Action - Blue</p> <ul> <li>hex #0076bb</li> <li>oklch(54.7% 0.1381 245.15)</li> <li> <p>rgb(0 118 187)</p> Tailwind Variables <p>--muted</p> </li> </ul> <p>Negative Action - Red</p> <ul> <li>hex #ba2c37</li> <li>oklch(52.2% 0.1777 22.14)</li> <li> <p>rgb(186 44 55)</p> Tailwind Variables <p>--destructive</p> </li> </ul>"},{"location":"database/","title":"Database Layer","text":""},{"location":"database/#database-requirements","title":"Database Requirements","text":"<p>The aim for the database layer of the application is to enforce data consistency and integrity as granular as possible. Whilst offering scalability in terms of ease of integration of new features, as well as scalability in terms of user base growth.</p> <p>The solution must also allow for modularity in the applications architecture such that new database technologies can be dropped in/out with minimal disruption to the other layers. </p> <p>Please Note</p> <p>This is important as a goal of the project is to deliver the ability to learn new technologies by using them to replace components of the application following the original design laid out in this document as a blueprint.</p> <p>Requirements:</p> <ul> <li>Please refer to the High Level Requirements.</li> </ul>"},{"location":"database/#tables","title":"Tables","text":"<p>Info</p> <p>Unless stated otherwise below, all <code>VARCHAR</code> fields have a constraint that ensures no special characters are used aside from a hyphen and a single space in between words. As well as all characters being stored in lowercase.</p>"},{"location":"database/#disease-pests","title":"Disease &amp; Pests","text":"PestDiseaseSymptomInterventionPest TreatmentPest PreventionDisease TreatmentDisease PreventionDisease SymptomFamily PestFamily Disease <p>Holds the various types of pests.</p> <p>Info</p> <ul> <li>The default <code>VARCHAR</code> constraint is not applied to the notes field.</li> </ul> <p>Holds the various types of diseases.</p> <p>Info</p> <ul> <li>The default <code>VARCHAR</code> constraint is not applied to the notes field.</li> </ul> <p>Holds the various types of symptoms different diseases can exhibit.</p> <p>Info</p> <ul> <li>The symptom field will not require the default <code>VARCHAR</code> constraint applied.</li> </ul> <p>Holds methods of intervention used to treat or prevent the various disease and pests.</p> <p>Info</p> <ul> <li>The default <code>VARCHAR</code> constraint is not applied to the notes field.</li> </ul> <p>A junction table that uses a composite primary key for linking what intervention methods are used to treat each type of pest.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to prevent each type of pest.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to treat each type of disease.</p> <p>A junction table that uses a composite primary key for linking what intervention methods are used to prevent each type of disease.</p> <p>A junction table that uses a composite primary key for linking what symptoms different types of diseases exhibit.</p> <p>A junction table that uses a composite primary key for linking what pests effect each family.</p> <p>A junction table that uses a composite primary key for linking what diseases effect each family.</p>"},{"location":"database/#family","title":"Family","text":"Botanical GroupFamilyAntagonist FamilyCompanion Family <p>Holds the name and if applicable, the maximum years before crop rotation is required, for the different botanical groups, i.e. Nightshade, Brassicas etc.</p> <p>Holds the common name for varieties of fruit and vegetables, i.e. Tomatoes, Broccoli, etc. Linking to the Botanical Group table via ID.</p> <p>A junction table that uses a composite primary key for linking what families should not be planted near each other. </p> <p>A junction table that uses a composite primary key for linking what families should be planted near each other. </p>"},{"location":"database/#user","title":"User","text":"UserUser AllotmentUser Active VarietiesUser Feed DayUser Notifications <p>Holds the minimum amount of unique user information required to provide the applications functionality.</p> <p>Info</p> <ul> <li>The user email &amp; password fields do not require the default <code>VARCHAR</code> constraint.</li> <li>The User first name field requires the <code>VARCHAR</code> constraint applied with an additional rule, preventing the use of numbers also.</li> <li>When an user is removed from this table a cascading delete upon the: user active varieties, user feed day, user preferences and user allotment tables is required for data consistency.</li> </ul> Future Improvement <ul> <li>Long term the Country Code will be used in conjunction with the User Allotment table to provide live weather information to users.</li> </ul> <p>Holds the minimum amount of information, about a specific users allotment, linked to the User table via user ID, required to provide the applications functionality. This table enforces the rule that each user can only have one allotment.</p> Future Improvement <ul> <li>Allotment Postal / Zip code will be required to provide live weather information to users.</li> <li>Information about the users allotments width &amp; length will be required to provide planting recommendations to users.</li> <li>When the functionality for providing planting recommendations is implemented, users with multiple allotments will have to total the measurements to get recommendations across there entire area.</li> </ul> <p>A junction table that uses a composite primary key for storing what grow guides users are currently following.</p> <p>Info</p> <ul> <li>There is currently no method of preventing users from following multiple guides for same specific variety of plant, it is down to users themselves to monitor this.</li> </ul> <p>A junction table that uses a composite primary key for storing what day each unique users gives each type of plant food.</p> <p>Info</p> <ul> <li>When a new user account is created, a database trigger is required to automatically insert a default User Feed Day entry for every available feed, assigning a default day (the first in the Day table). This ensures every user always has a nominated day for each feed, which can later be updated within the Users Preferences page.</li> </ul> <p>Holds a users notification preferences. Stored in a dedicated table so their preferences can persist but also be turned off entirely if required as this is likely to be a premium feature long term. It is to default with them all turned on.</p>"},{"location":"database/#grow-guide","title":"Grow Guide","text":"VarietyLifecyclePlanting ConditionsFeedFrequencyFrequency Default DayVariety Water DayDayWeekMonthSeasonCountry Season <p>The predominate table end users interact with. Storing the grow guides. The application works on the concept of users planning their allotment activities on a weekly basis, these weekly activities can then be linked to specific days, as well as months &amp; seasons referred to.</p> <p>Info</p> <ul> <li>The default <code>VARCHAR</code> constraint is not applied to the notes field.</li> <li>The first constraint this table requires, is that any time even a single column is altered the last updated column is set to the current datetime.</li> <li>The next constraint this table requires is that if either one of the following pairs exists the other must also:<ol> <li>Transplant Week Start &amp; Transplant Week End</li> <li>Prune Week Start &amp; Prune Week End</li> </ol> </li> <li>The same logic, in that if a single one exists so must the rest, applies to the following group of columns:<ol> <li>Feed ID - Feed Week Start - Feed Frequency</li> </ol> </li> <li>The final constraint this table requires, is one that ensures the combination of Owner ID &amp; Variety Name is unique.</li> <li>When a entry within this table is deleted a cascading delete upon the user active varieties and variety water day will be required.</li> </ul> <p>A reference table for the possible lifecycle's available when creating grow guides i.e. Perennial, Annual, etc. Due to the lifecycle of a variety being key to defining the logic around their care, the names are to be controlled via a enum that is consistent between the server side and database layers.</p> <p>A reference table for the possible planting conditions available when creating grow guides i.e. Sunny, Sheltered, etc.</p> Future Improvement <ul> <li>Further table(s) will be required to allow for users to detail what portions of their allotment meet these conditions to provide more accurate planting recommendations.</li> </ul> <p>A reference table for the possible plant feeds available when creating grow guides i.e. Bone Meal, Tomato Feed, etc.</p> <p>A table that holds different frequency units available for use when creating grow guides. i.e. a frequency of Weekly that means the activity would be performed 52 days across this year.</p> Future Improvement <p>This table will replace the Variety Water Day table as the predominate table for detailing watering activities when live weather monitoring is functional. Allowing for use cases like a certain variety needs watering every three days. The weather can then be monitored and if there has been no rainfall at the users allotment location within the last three days they will be prompted to water that variety.</p> <p>A junction table that stores, for each frequency, the corresponding day, i.e. weekly tasks are always performed on a sunday.</p> Future Improvement <p>Long term this table can be updated to include a users id, allowing then an interface to be provided for a user to specify their own default days for a frequency.</p> <p>A junction table that uses a composite primary key for linking what day each variety detailed within a unique grow guide should be watered on.</p> <p>Info</p> <ul> <li>Currently the API handles populating this table at variety creation by using the frequency a user has selected for watering and the default days to water on for that frequency, based on the frequency default table, to create the required entries.</li> </ul> Future Improvement <ul> <li>This entire table will be de-prioritized once live weather information is provided to users. In favour of using the Water Frequency columns on the Variety table to recommend to users when to water crops based on the weather in their Postal \\ Zip code.</li> </ul> <p>A reference table for the seven days of the week available when creating grow guides. Also provides a clear entry point when collecting specific information for daily tasks to provide to end users.</p> <p>A table that holds the 52 weeks of the year and their corresponding start and end dates in the format of <code>01/01, 07/01</code> etc. The month each unique week starts in is also stored to allow for easy collection of month specific activities.</p> <p>Info</p> <ul> <li>A check constraint is required to ensure the start &amp; end date columns meet the described format.</li> <li>There is one week that has a potential 8 days within it in order to handle leap years.</li> </ul> <p>A reference table for the twelve possible months for use when creating grow guides. Also provides a clear entry point for collecting month specific information to provide to end users.</p> <p>Info</p> <p>The application predominantly works on the concept of users planning their allotment activities on a weekly basis, these weekly activities can then be distributed across the seven available days. Due to this the Month table links to the Week table via ID.</p> <p>A reference table linked to the Country Seasons table via ID that stores the possible seasons available, i.e. Summer, Spring.</p> <p>A table that stores the start and end date for each season per unique country. These dates can then be referenced against the Week and User table for detailing seasonal activity to end users.</p> <p>Info</p> <ul> <li>The first check constraint this table requires is one to ensure the start &amp; end date columns meet the following format <code>01/01, 07/01</code>, as per the Week table.</li> <li>The next check constraint required is one that ensures for each unique country added, all four corresponding seasons are added at the same time.<ul> <li>It is up to database admins to ensure the start &amp; end dates for these seasons are correct due to the large variation between countries, but infrequent requirement of data being added.</li> </ul> </li> </ul>"},{"location":"database/#database-adr","title":"Database ADR","text":"<p>Decision record for the underlying database technology selected to support the project. When selecting the intended technology it is important to remember the proposed schema is heavily relational and the project has a requirement to run on Linux based systems with the desire to have the option to scale in support of 2.5 million unique active users. The technology must also be free for commercial use.</p> <p>Outcome</p> <ul> <li>PostgreSQL<ul> <li>A relational database technology that is ACID compliant with a rich ecosystem. Meeting all the project requirements and offering extensible features like JSONB and support for complex relationships.</li> </ul> </li> </ul> Alternatives <ol> <li> <p>MySQL</p> <ul> <li>The second runner. Again a relational database technology with a broad ecosystem that suits applications with moderate complexity and offers a slightly lower barrier to entry that PostgreSQL and arguably more suited to type of web application being proposed within the project. However, there are potential barriers for commercial use.</li> </ul> </li> <li> <p>MongoDB</p> <ul> <li>A NoSQL database. As the projects data will be structured and not hierarchical, where ideally the schema does not change frequently, this is not suitable solution. The most likely database candidate for learning document based databases when the tertiary goal of having the project provide a template for learning new technologies is realized.</li> </ul> </li> <li> <p>CockroachDB</p> <ul> <li>A distributed SQL database that combines scalability of NoSQL with the consistency and relational capabilities of PostgreSQL. A strong candidate if PostgreSQL becomes a blocker to project scalability.</li> </ul> </li> </ol>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#deployments-requirements","title":"Deployments Requirements","text":"<p>The application is to prioritize the ability to vertically scale over horizontally in order to retain the ability to efficiently deploy to private and/or dedicated servers if desired in the future. However, the initial method of deploying the system to production is to be one that is robust and repeatable, allowing for a seamless CI/CD experience to a cloud based environment that offers managed PostgreSQL. Affording the application the ability to scale in user base and application reach.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>The deployment method must be one that stands the application up in production on a cloud based hosting provider that offers managed PostgreSQL solutions.</p> </li> <li>Must integrate into a CI/CD pipeline that produces Docker containers for both the front and backend services designed to run on Linux based operating systems, held in a online registry.<ul> <li>The Client, Server and Database layers of the application must be able to be deployed in isolation to support the applications modular architecture.</li> </ul> </li> </ul>"},{"location":"deployment/#deployment-adr","title":"Deployment ADR","text":"<p>Whilst the application is to prioritize vertical scaling over horizontal, in order to retain the ability to efficiently deploy to private and/or dedicated servers if desired, the current intended deployment scenario is one that use a cloud based hosting provider that offers managed Postgres and the ability to to run Docker containers.</p> <p>Outcome</p> <ul> <li>Render<ul> <li>Like Fly.io, Render provides a pathway for Docker based deployments, offering managed PostgreSQL databases, global distribution and good performance, it offers this solution with a free tier though which is ideal in this iteration of the project.</li> </ul> </li> </ul> Alternatives <ol> <li> <p>Fly.io</p> <ul> <li>Fly.io provides a simple pathway for Docker based deployments, offering built in PostgreSQL, global distribution and good performance at the expense of customizability when compared to a provider like AWS.</li> </ul> </li> <li> <p>Digital Ocean</p> <ul> <li>Whilst Digital Ocean provides full control over a cost effective environment it requires a manual setup and maintenance, something that isn't within scope of the project at this iteration. </li> </ul> </li> <li> <p>AWS</p> <ul> <li>Whilst AWS provide highly scalable managed severs the cost can spiral with this scale, making it a poor choice currently.</li> </ul> </li> </ol>"},{"location":"deployment/#deployment-process","title":"Deployment Process","text":"<p>In order to ensure that the applications deployments are scalable and repeatable GitHub actions is leveraged to execute a CI/CD pipeline that pushes separate containers for the front and backend to a registry. Render then access this registry to deploy from via a hook.</p> <ol> <li> <p>CI Pipelines</p> <ul> <li> <p>The Frontend pipeline is triggered each time a pull to <code>main</code> is made that alters content stored within the <code>frontend</code> folder. First ensuring the correct versions of <code>Node</code> &amp; <code>NPM</code> are available before installing the dependencies in order to check the linting and formatting and ensure the <code>TypeScript</code> code compiles. Once these steps are complete the test suite is ran and upon a 100% pass rate the CD pipeline is triggered.</p> </li> <li> <p>The Backend pipeline is triggered each time a pull to <code>main</code> is made that alters content stored within the <code>backend</code> folder. First it installs <code>UV</code> before using the package management tool to install <code>Python</code> and the required dependencies. The virtual environment is then activated so the linting and formatting can be checked followed by verification of the static typing. Once these steps are complete the test suite is ran and upon a 100% pass rate the CD pipeline is triggered.</p> <p>Info</p> <p>In order to run the backend test suite the <code>.env.template</code> is utilized to provide environment variables.</p> </li> </ul> </li> <li> <p>CD Pipelines</p> <ul> <li> <p>The Frontend pipeline orchestrates the process of creating the required frontend container for application deployment and registering it on GitHub. This process leverages a <code>Dockerfile</code> that installs the dependencies, copies the source code for better caching and builds the application. An <code>NGINX</code> configuration, that is under version control in the repository, is then applied via a <code>docker-entrypoint.sh</code> script prior to container startup.</p> </li> <li> <p>The Backend pipeline orchestrates the process of creating the required backend container for application deployment and registering it on GitHub. This process leverages a <code>Dockerfile</code> that installs <code>UV</code> before then using the package management tool to install the applications dependencies. The source code is to then copied for caching and the APIs health check endpoint utilized for monitoring and recovery. Database migrations are then ran prior to container startup. A <code>docker-entrypoint.sh</code> script that leverages the <code>Alembic</code> migrations is executed to facilitate this.</p> </li> </ul> <p>Info</p> <p>In order to ensure that only relevant source code is copied, making the images smaller, more secure, and faster to build <code>.dockerignore</code> files are stored in the Frontend &amp; Backend folders.</p> </li> <li> <p>Register the Containers on GitHub</p> <ul> <li>Upon successful orchestration of the CD pipeline a Frontend &amp; Backend container is registered within the repository on GitHub.</li> </ul> </li> </ol> <p>Deployment Files</p> <pre><code>/.github/workflows\n    - backend_cd.yml\n    - backend_ci.yml\n    - docs_cicd.yml\n    - frontend_cd.yml\n    - frontend_cd.yml\n/backend\n    - .dockerignore\n    - docker-entrypoint.sh\n    - dockerfile\n/frontend\n    - .dockerignore\n    - docker-entrypoint.sh\n    - dockerfile\n    - nginx.conf\n</code></pre> <p>Please Note</p> <p>All the steps up to this point have not been Render specific and the produced front and backend containers can be taken from the registry, configured thorough the use of environment variables and deployed via almost any method desired.</p> <ol> <li> <p>Deploy the Backend &amp; Frontend Containers on Render</p> <ul> <li> <p>The next step after registering the containers is deploying them to Render. This is step is automated thorough the use of deployment hooks, one for the frontend and one for the backend, in order to access the hooks provided by Render the following steps have been completed:</p> </li> <li> <p>Create a Environment on Render</p> <ul> <li>The application sits within an environment created in the Render dashboard that consists of three individual services.</li> </ul> </li> <li> <p>Create a PostgreSQL Database Service in the Environment</p> <ul> <li>A PostgreSQL database has been configured as a service within the application.</li> </ul> </li> <li> <p>Create The Front and Backend Services in the Environment</p> <ul> <li>Separate web services have been created within the Render environment. One for the Frontend and one for the Backend. Each of these services has had their environment variables configured through the Render UI based upon the <code>.env.template</code> files found within the Frontend &amp; Backend folders.</li> </ul> <p>Info</p> <p>When running the application for local development, copies of these files are created and the template suffix dropped in order to run the application. To prevent the leaking of secrets to the public these files have been added to the repositories global <code>.gitignore</code> file. More information on setting the project up locally can be found in the <code>CONTRIBUTING.md</code> file at the root of the repository.</p> <p>Info</p> <p>As the frontend is a Vite application that is built during the CD pipeline and the resulting container pushed to a registry, environment variables are injected at runtime. This is achieved by a script that generates a <code>env-config.js</code> file within the Docker container when it starts, making the variables available to the application.</p> </li> <li> <p>Register The Hook in GitHub</p> <ul> <li>The provided hook, found in the settings tab of the Render UI for each respective web service, has then been registered in the GitHub repositories Settings tab under the Secrets and Variables: Actions section. The CD pipelines utilize these keys to trigger automated deployment to the platform.</li> </ul> </li> </ul> </li> </ol> <p>Please Note</p> <p>The developer documentation, detailed in the <code>docs</code> folder of the repository, is a <code>MKDocs</code> application that is automatically deployed via a CI/CD action on GitHub to there static website hosting platform (GitHub Pages). The pipeline leverages <code>UV</code> to install the required dependencies and build the static website before pushing these files to a <code>gh-pages</code> branch that the site is configured to display from within the GitHub dashboard.</p>"},{"location":"implementation/","title":"Implementation","text":""},{"location":"implementation/#implementation","title":"Implementation","text":"<p>Please Note</p> <ul> <li>This whole section of the documentation is for reference when building the entire application from the ground up and details a logical approach to developing and integrating each of its constituents.</li> </ul> <p>The application is designed to be implemented following the Walking Skeleton approach, allowing for a minimal end-to-end version to be completed early before then expanding upon it, a logical sequence of development is laid out below.</p>"},{"location":"implementation/#preliminary","title":"Preliminary","text":"<p>Info</p> <ul> <li>A Linux based operation system will be required that has PostgreSQL &amp; pgAdmin installed alongside UV and NPM for package management of Python and JavaScript libraries respectively. </li> <li>A GitHub and Render account will also be required for version control and hosting of the application.</li> <li>A code editor will also be required.</li> </ul>"},{"location":"implementation/#skeleton","title":"Skeleton","text":"<ol> <li> <p>Scaffold Code Repository Structure</p> <ul> <li> <p>The code is to be placed under version control in GitHub with a repository that includes the backend and frontend folders as well as a <code>.github/workflows</code> folder to hold infrastructure as code files plus a docs folder to house supporting documentation.</p> <p>Please Note</p> <p>i.e. this design document, which is a MkDocs application hosted via GitHub pages.</p> </li> </ul> </li> <li> <p>Server Side Initial Setup</p> <ul> <li>A Minimal FastAPI application is to be implemented with a health check endpoint.<ul> <li>Pydantic, Ruff and MyPy can be integrated at this point.</li> </ul> </li> </ul> </li> <li> <p>Database Integration</p> <ul> <li>SQLAlchemy is to be used to setup and migrate the database schema for the User table to a PostgreSQL database used for development.<ul> <li>Pytest can be utilized at this point to allow for the automated integration testing of the server and database layers.</li> </ul> </li> </ul> </li> <li> <p>Authentication</p> <ul> <li>The User registration and login endpoints are to be created, allowing for the implementation of the JWT authentication solution using the Authlib and fastapi.security libraries.<ul> <li>This is also an ideal time to setup structlog as a logging system.</li> </ul> </li> </ul> </li> <li> <p>Client Side Initial Setup</p> <ul> <li>A React application is to be initialized with TypeScript &amp; Vite using React Router to create an initial dashboard, allowing for the introduction of Tailwind CSS and Shadcn UI components.<ul> <li>Biome can be integrated at this point</li> </ul> </li> </ul> </li> <li> <p>User Registration &amp; Login + User Logout Interface</p> <ul> <li>A login form is to be created, requiring the implementation of Axios for API queries along with an authentication context using the ContextAPI and the storing of JWT tokens using React Query. A registration form is to also be created, requiring ZOD and React Hook Form for validation.<ul> <li>MSW can be utilized now for API integration testing.</li> <li>Initial setup of Workbox for offline capabilities can also be setup now.</li> <li>A hook for logging out users on the frontend should also be implemented at this point as it offers the ability to manually test the registration flow and authentication state of the UI.</li> </ul> </li> </ul> </li> <li> <p>User Password Reset Interface</p> <ul> <li> <p>As the skeleton of the application offers little in terms of user functionality a password reset method is to be implemented in order to prepare for the likely event of returning users once the app becomes feature rich.</p> <p>Future Improvement</p> <p>Resend's free tier is sufficient to handle emails in development, but once in production a domain will need to be purchased and Resend configure appropriately.</p> </li> </ul> </li> <li> <p>User Profile Interface</p> <ul> <li>At this point it is minimal effort to setup the User Profile interface in its entirety.</li> </ul> </li> <li> <p>CI/CD</p> <ul> <li> <p>GitHub actions are to be setup in order to automate builds and release pipelines to production. These pipelines are to ensure Docker containers, that have passed all required validations, are registered on GitHub and then deployed to a hosting provider that offers managed PostgreSQL solutions.</p> <p>Info</p> <p>Further detail on the required validations can be found in the <code>CONTRIBUTING.md</code> file at the root of the repository.</p> <p>Please Note</p> <p>The current hosting provider is Render.</p> </li> </ul> </li> </ol>"},{"location":"implementation/#body","title":"Body","text":"<ol> <li> <p>Botanical Group List Interface</p> Info <p>Will require the implementation of the Family tables: Family, Botanical Group, Antagonist &amp; companion.</p> </li> <li> <p>Family Information Interface</p> Info <p>Will require the implementation of the Disease &amp; Pest group of tables.</p> </li> <li> <p>User Allotment Interface</p> Info <p>Will require the implementation of the User Allotment table.</p> </li> <li> <p>User Preference Interface</p> Info <p>Will require the implementation of the Day, Feed and User Feed Day tables.</p> Future Improvement <p>This is the first point where offline data synchronization would offer tangible benefit. Cross tab sync for authentication could also be considered here.</p> </li> <li> <p>Grow Guide &amp; User Owned Grow Guide Interfaces</p> Info <p>Will require the implementation of the: Week, Month, Lifecycle, Planting Conditions, Frequency and Frequency Default Day tables followed by the Variety and Variety Water Day tables. Allowing for users to create Grow Guides that can then be viewed and set to active once the User Active Varieties table has been implemented.</p> </li> <li> <p>Weekly ToDo</p> </li> <li> <p>Public Grow Guides</p> </li> <li> <p>User Notification Interface</p> </li> <li> <p>Monthly ToDo</p> Info <p>Will require the implementation of the Country Season and Season tables.</p> </li> </ol>"},{"location":"overview/","title":"High Level Requirements","text":""},{"location":"overview/#requirements","title":"Requirements","text":"<ul> <li>Every aspect off the application must run on Linux based operating system.</li> <li>All technologies, libraries and packages must be free for commercial use.</li> <li>The application is to be mobile first.</li> <li>The application is to be a Progressive Web App (PWA).</li> <li> <p>The applications architecture must ensure that the Client, Server and Database layers are not tightly coupled. So to to allow for the ease of replacing them with other technologies as desired.</p> <p>Please Note</p> <p>A goal of the project is to deliver upon the ability to use this document as a blueprint to reproduce aspects of the application in new technologies as a personal learning and development exercise.</p> </li> </ul>"},{"location":"overview/#key-considerations","title":"Key Considerations","text":""},{"location":"overview/#the-development-team","title":"The Development Team","text":"<ul> <li> <p>A personal project for a developer familiar with domain driven design, mainly using Python for server side code and modern JavaScript/TypeScript based frameworks like React &amp; Vue for creating user interfaces built on top of relational databases. With a strong desire to use advanced design patterns.</p> </li> <li> <p>Able to working in CI/CD environments with agile delivery.</p> </li> <li>Able to produce their own custom components or make use of component libraries like Mui &amp; Tailwind.</li> </ul>"},{"location":"overview/#deployments","title":"Deployments","text":"<ul> <li> <p>The ability to vertically scale is prioritized over horizontal scaling as the option to efficiently deploy to private and/or dedicated servers must always be available to the application. </p> <p>Please Note</p> <p>The current deployment scenario is one that uses containers created with Docker, hosted in a cloud environment by a provider that offers managed database solutions.</p> </li> <li> <p>The application is served by a single database so there is currently no need for eventual consistency.</p> <p>Please Note</p> <p>However, the client and server side application are not tightly coupled so to allow for independent deployment inline with the modular architectural design.</p> </li> </ul>"},{"location":"overview/#user-base","title":"User Base","text":"<ul> <li>The age of a typical user is to be assumed to be between 35-75, due to this all aspects of the user interface must be intuitive and simple to use.</li> <li>There is an estimated 330,000 allotments in the UK, assuming each of these has a unique owner the initial scale that the application must be able to support is 10% or 33,000 users. </li> <li> <p>It is also to be assumed that traffic peaks on the weekends, with the application required to support many concurrent users, especially during summer months. Due to this the architecture should be able to facilitate several thousand unique queries at a time initially.</p> <p>Please Note</p> <p>Due to the modularity in the applications architecture design, a solution to further scaling is the option of selecting a new underlying technology. However, if the initial technologies used can scale to support roughly 2.5 million active users at once it would be more than sufficient to support the entire market share of European allotments.</p> </li> </ul>"},{"location":"server_side/","title":"Server Side","text":""},{"location":"server_side/#server-side-requirements","title":"Server Side Requirements","text":"<p>The aim with the server side layer of the application, much like the database and client layers, is to support the applications overall modular design by not being tightly coupled to its neighbors, whilst still enforcing data consistency and integrity. </p> <p>All while delivering a fast and seamless \"request - response\" experience to many concurrent end users who are performing CRUD operations that require relatively simple business logic but complex queries with multiple joins.</p> <p>Requirements:</p> <ul> <li> <p>Please refer to the High Level Requirements.</p> </li> <li> <p>Must integrate with PostgreSQL.</p> </li> <li>Must support typing so to harmonize with the robust relation database schema proposed.</li> <li>Must be able to integrate with a user authentication system.</li> <li>Must integrate with a user interface that facilities user creation and Create, Read, Update &amp; Delete (CRUD) actions en masse.<ul> <li>Will need to integrate with a modern front end framework in order to deliver a progressive web app (PWA).</li> </ul> </li> <li>Must adhere to the Representational State Transfer (REST) architectural design principles.</li> <li>Must be able to accommodate server side caching in order to support offline capabilities as allotments can be in areas of poor signal.</li> <li>Must be able to support push notifications and automated email in order to implement a feature rich application.<ul> <li>Must be able to support batch processing in order to send these notifications.</li> </ul> </li> </ul> <p>Testing Considerations:</p> <ul> <li>Unit tests that confirm the Server Side solution enforces the stipulated data consistency will be required such that the architectural goal of modularity can be realized.</li> <li>Integration tests against the PostgreSQL database would also be beneficial.</li> </ul> <p>Info</p> <p>Testing the happy pathway is to be prioritized and deemed sufficient unless a bug is discovered that steers the application away from intended functionality. In this instance a test confirming the bug is no longer present is to be written first before a resolution is implemented, following Test Driven Development (TDD) principles and allowing for an automated check that the ensures the application does not regress in the future.</p>"},{"location":"server_side/#routes","title":"Routes","text":""},{"location":"server_side/#user-tables","title":"User Tables","text":"UserUser AllotmentUser PreferencesUser Notifications <p>Ability to create a user account with email and password that can have a first name and country code assigned to it. Whilst all fields must be readable, only a users country and name must be editable.</p> <p>Info</p> <p>Supporting routes like: login &amp; logout, password reset and email confirmation are also provided when interacting with the User table.</p> <p>Ability for users to create an associated allotment. The details required for this allotment include a zip or postal code along with a width and length measurement. These fields must be editable by the associated user and thus must also be readable.</p> <p>Ability for users to set and update their nominated day for each type of plant feed available within the system.</p> <p>Ability for users to set and update their notifications preferences.</p> Future Improvement <p>The ability for users to be able to trigger a cascading delete of all their related data is desirable but currently not a strict requirement as this can be done manually. The effected tables are: user, user active varieties, user feed day, variety water day and the user allotment table.</p>"},{"location":"server_side/#disease-pest-family-tables","title":"Disease, Pest &amp; Family Tables","text":"<p>Ability to read from the following tables found within the database:</p> <ol> <li>Intervention</li> <li>Pest Treatment</li> <li>Pest Prevention</li> <li>Disease Treatment</li> <li>Disease Prevention</li> <li>Pest</li> <li>Disease</li> <li>Symptom</li> <li>Family Pest</li> <li>Family Disease</li> <li>Disease Symptom</li> <li>Family</li> <li>Botanical Group</li> <li>Antagonist Family</li> <li>Companion Family </li> </ol> Future Improvement <p>There is only a requirement for read routes on these tables as the data stored within them is to be owned by the projects database administrator(s) and can be updated manually at the database layer via SQL if required. The ability to abstract this out into an administrators panel in the UI later on is desirable though as this will allow for more efficient scaling. </p>"},{"location":"server_side/#grow-guide-tables","title":"Grow Guide Tables","text":"Grow GuidesActivate GuidePublish GuideFeed Day'sSupporting Tables <p>The Variety table is the main table users interact with and the data within it forms the backbone off the application. It utilizes the applications authentication solution to allow users to perform complete CRUD operations on the data contained within it. Only a authenticated User, who's ID matches the owner column of a pre exiting row, can alter any data within that row. The complexities of this table that the server side service accommodates include:</p> <ol> <li>If either one of the following pairs exists the other must also:<ol> <li>Transplant Week Start &amp; Transplant Week End</li> <li>Prune Week Start &amp; Prune Week End</li> </ol> </li> <li>The same logic, in that if a single one exists so must the rest, applies to the following group of columns:<ol> <li>Feed ID - Feed Week Start - Feed Frequency</li> </ol> </li> <li>When a entry within this table is deleted a cascading delete upon the user active varieties and variety water day is performed.</li> </ol> <p>Users have the ability to set the grow guides they own to active and/or inactive. This action utilizes a route that can read, create and delete entries from the User Active Varieties junction table.</p> <p>Users have the ability to make guides they own public/private.     - The ability for users to copy public guides is also provided.</p> <p>Users have the ability to alter the day they give a nominated feed type. This utilizes a read and update route that manipulates entries in the User Feed Day table.</p> <p>Ability to read from the following tables found within the database:</p> <ol> <li>Lifecycle</li> <li>Week</li> <li>Month</li> <li>Day</li> <li>Planting Conditions</li> <li>Feed</li> <li>Frequency</li> <li>Frequency Default Day</li> <li>Country Season</li> <li>Season</li> </ol> Future Improvement <p>There is only a requirement for read routes on these tables as the data stored within them is to be owned by the projects database administrator(s) and can be updated manually at the database layer via SQL if required. The ability to abstract this out into an administrators panel in the UI later on is desirable though as this will allow for more efficient scaling. </p>"},{"location":"server_side/#todo-routes","title":"ToDo Routes","text":"<p>Info</p> <p>The main use case for the application is that users can create and follow grow guides and based upon these guides, have the application produce a todo list of activities they must undertake. These todo lists are split into levels.</p> Weekly &amp; DailyMonthly &amp; Seasonal <p>A route that uses the Weeks table, joined to the Variety Table which is then joined to the: User Active Varieties, Feed Table and the Frequency table in order to provide users with a list of weekly tasks.</p> <p>The Day table is then joined in order to provide users with a list of daily todos across a specific week.</p> <p>A route that uses the Month table, joined to the Variety Table which is then joined to the: User Active Varieties, Feed Table and the Frequency table in order to provide users with a list of monthly tasks.</p> <p>This level can then be referenced against the Season and Country Season tables in order to provide a list of seasonal tasks.</p> Future Improvement <p>These todos, whilst surfaced in the application for users to interact with, will also eventually be able to be sent out as notifications via Email or Push Notification.</p>"},{"location":"server_side/#general-data-integrity-rules","title":"General Data Integrity Rules","text":"<p>A method for ensuring no special characters, aside from hyphens and a single space are used, as well as all characters are lower case os provided. That is to be applied to most text based columns, aside from those designated to store notes.</p> <p>Please Note</p> <p>Notes columns are not idea in relational databases and it is to be an ongoing effort to look at the content users are storing within these columns in an effort to provide a more efficient solution.</p>"},{"location":"server_side/#server-side-architecture","title":"Server Side Architecture","text":""},{"location":"server_side/#design-patterns","title":"Design Patterns","text":""},{"location":"server_side/#repository-pattern","title":"Repository Pattern","text":"<p>Purpose</p> <p>Encapsulate data access logic via SQL queries or ORM logic and provide abstraction over database queries by hiding implementation details from the service layer.</p> <p>Boundary</p> <p>Operates at the Database Layer, Interacting only with the database and should not contain business logic or handle transactions.</p> <p>Design</p> <p>A Repository class is created for each aggregate or related table group.</p> <p>The systems Repositories include:</p> UserFamilyGrow Guide <p>User Repository </p> <ul> <li>To encapsulate the: User, User Allotment, User Feed Day, User Notifications and User Active Varieties tables.</li> </ul> <p>Family Repository</p> <ul> <li>To encapsulate the: Family, Botanical Group, Family Antagonist &amp; Family Companion tables.</li> <li>To encapsulate a Families relation to the:<ul> <li>Pest, Pest Treatment, Pest Prevention and Family Pest tables.</li> <li>Disease, Disease Treatment, Disease Prevention, Symptom, Disease Symptom and Family Disease tables.</li> </ul> </li> </ul> <p>Variety Repository</p> <ul> <li>To encapsulate the: Variety, Variety Water Day, Planting Conditions, Feed, Lifecycle and Frequency tables.</li> </ul> <p>Seasonal Repository</p> <ul> <li>To encapsulate the Country Season and Season tables.</li> </ul> <p>Day Repository</p> <ul> <li>To encapsulate the Day table.</li> </ul> <p>Week Repository</p> <ul> <li>To encapsulate the Week table.</li> </ul> <p>Month Repository</p> <ul> <li>To encapsulate the Month table.</li> </ul>"},{"location":"server_side/#unit-of-work","title":"Unit of Work","text":"<p>Purpose</p> <p>Groups multiple repository operations into a single transaction, ensuring atomicity and consistency when committing or rolling back operations.</p> <p>Boundary</p> <p>Only interacts with Repositories at the Service Layer.</p> <p>Design</p> <p>Unit of Work classes are created to manage transactions and ensure multiple database operations occur as a single unit.</p> <p>The systems classes include:</p> User ManagementGrow Guide ManagementToDo ManagementFamily Information <ul> <li> <p>For handling the creation of users.</p> </li> <li> <p>For creating and managing user allotments.</p> </li> <li> <p>For setting nominated feed days.</p> </li> <li> <p>For setting notification preferences.</p> </li> </ul> <ul> <li> <p>For CRUD operations on grow guides.</p> </li> <li> <p>For handling public/private status and copying guides.</p> </li> </ul> <ul> <li> <p>For weekly tasks (coordinating Day, Week, Variety, and User repositories).</p> </li> <li> <p>For monthly tasks (coordinating Month, Variety, User, and Seasonal repositories).</p> </li> </ul> <ul> <li>For family information pages (coordinating Family, Disease, Pest, Intervention, Antagonist &amp; Companion Family repositories).</li> </ul>"},{"location":"server_side/#factory-pattern","title":"Factory Pattern","text":"<p>Purpose</p> <p>Apply any business rules or validations before persistence, ensuring the persistence of invalid objects by repositories is prevented.</p> <p>Boundary</p> <p>Prepares objects at the Domain Layer before they are passed to the Repositories or Unit of Work classes.</p> <p>Design</p> <p>The Factory pattern is used to simplify the creation of complex domain objects with all required fields validated and constraints applied.</p> <p>The systems Factories include:</p> UserGrow Guide <ul> <li>User Factory</li> </ul> <ul> <li>Variety Factory</li> </ul> <p>Please Note</p> <p>Data input for the remaining tables is handled via a database admin currently factories are not required until an admin panel is introduced in to the application.</p>"},{"location":"server_side/#workflow","title":"Workflow","text":"<p>The server-side architecture is designed to enforce clear boundaries between layers, ensuring modularity, scalability, and maintainability. Each layer has a distinct purpose and interacts with others in a controlled manner.</p>"},{"location":"server_side/#create-update","title":"Create &amp; Update","text":"<p>Example</p> <ol> <li> <p>API Layer (Endpoints):</p> <ul> <li>Receives the request and validates input using Pydantic schemas.</li> <li>Delegates the business logic to the Service Layer.</li> </ul> </li> <li> <p>Service Layer (Unit of Work):</p> <ul> <li>Starts a Unit of Work to manage the transaction.</li> <li>Invokes the Domain Layer (i.e. Factories) to validate and prepare domain objects.</li> <li>Coordinates operations across multiple Repositories via the Unit of Work.</li> </ul> </li> <li> <p>Domain Layer (Factories):</p> <ul> <li>Applies business rules and validations to ensure only valid objects are passed to the Repository Layer.</li> <li>Returns validated domain objects to the Service Layer.</li> </ul> </li> <li> <p>Repository Layer:</p> <ul> <li>Encapsulates database access logic.</li> <li>Executes SQL queries or ORM operations to persist the validated objects.</li> </ul> <p>info</p> <p>Does not handle transactions or business logic.</p> </li> <li> <p>Service Layer (Unit of Work):</p> <ul> <li>Finalizes the transaction by committing or rolling back changes.</li> <li>Returns the result to the API Layer.</li> </ul> </li> <li> <p>API Layer:</p> <ul> <li>Constructs the response and sends it back to the client.</li> </ul> </li> </ol>"},{"location":"server_side/#read-delete","title":"Read &amp; Delete","text":"<p>Example Workflow</p> <ol> <li> <p>API Layer (FastAPI Endpoints):</p> <ul> <li>Receives the request and validates input using Pydantic schemas.</li> <li>Delegates the business logic to the Service Layer.</li> </ul> </li> <li> <p>Service Layer (Unit of Work):</p> <ul> <li>Starts a Unit of Work to manage the operation.</li> <li>Invokes the Repository Layer to fetch or delete data.</li> </ul> </li> <li> <p>Repository Layer:</p> <ul> <li>Executes SQL queries or ORM operations to retrieve or delete data.</li> <li>Returns the result to the Service Layer.</li> </ul> </li> <li> <p>Service Layer (Unit of Work):</p> <ul> <li>Finalizes the operation by committing or rolling back changes (if applicable).</li> <li>Returns the result to the API Layer.</li> </ul> </li> <li> <p>API Layer:</p> <ul> <li>Constructs the response and sends it back to the client.</li> </ul> </li> </ol>"},{"location":"server_side/#folder-structure","title":"Folder Structure","text":"<p>Pattern-Based Folder Structure</p> <p>Due to the server-side being a FastAPI application that has a well defined architecture that makes use of specified design patterns the following folder structure is implemented, allowing related logic to be kept together.</p> FastAPI &amp; Python Application<pre><code>/app\n    /api\n        /core\n            - auth_utils.py\n            - config.py\n            - database.py\n            - limiter.py\n            - logging.py\n        /factories\n            - Contains the \"Factories\" that apply business rules and/or validation before persistence\n        /middleware\n            - error_codes.py\n            - error_handler.py\n            - exception_handler.py\n            - logging_middleware.py\n        /models\n            - Contains the Database Models.\n        /repositories\n            - Encapsulate data access logic via SQL/ORM logic abstracting it into \"Repositories\".\n        /schemas\n            - Contains Schemas for request &amp; response serialization.\n        /services\n            - Contains the \"Units Of Work\" for grouping multiple repository operations into a single transaction.\n            - Contains any general purpose utilities i.e. the email service.\n        /v1\n            - Contains the API Endpoints.\n    - main.py\n    - .env\n/migrations\n    - Database migrations version controlled with `Alembic`\n/tests\n    - Integration &amp; Unit test suites ran with `Pytest`\n- pyproject.toml\n- uv.lock\n</code></pre>"},{"location":"server_side/#server-side-adr","title":"Server Side ADR","text":"<p>Decision record for the server side technologies selected to support the project. When selecting the intended technologies it is important to remember the project requires a modular, scalable and maintainable architecture to support a progressive web app. The server side must run on Linux based operating systems using technologies that are free for commercial use and can integrate with a PostgreSQL database via a RESTful API with support for user authentication. The technologies must also handle many concurrent users that require a high-read workload, caching is also required to support this as well as background tasks.</p> <p>Outcome</p> <ul> <li> <p>Python &amp; FastAPI</p> <ul> <li> <p>Python is well suited for Domain-Drive-Design (DDD) and can be written to provide strong typing support. The team are also familiar with the language already.</p> </li> <li> <p>FastAPI is a high-performance web framework, that automatically generates API documentation and can handle many concurrent users and provides strong typing support via Pydantic. SQLAlchemy, Authlib and Redis can be used to handle PostgreSQL and 2 &amp; multiple methods of user authentication as well as caching support. Celery can also be used to support background tasks. However it does not provide an out the box admin panel, this is not a strict requirement currently though.</p> </li> </ul> </li> </ul> Alternatives <ol> <li> <p>TypeScript &amp; NextJS</p> <ul> <li> <p>TypeScript is an extremely type safe language that the team do have experience with already and its use would allow them to use the same programming language on the Client &amp; Server sides. However the ecosystem is less mature for PostgreSQL integration than when compared to the Python ecosystem</p> </li> <li> <p>NextJS is a highly modular and scalable framework that offers TypeORM for support in writing database queries that would adhere to the Repository Pattern. As well as integrating with Redis for caching and BullMQ for background tasks. Passport.js could also be used to provide authentication/authorization support.</p> </li> </ul> </li> <li> <p>Python &amp; Django</p> <ul> <li> <p>Python is well suited for Domain-Drive-Design (DDD) and can be written to provide strong typing support. The team are also familiar with the language already.</p> </li> <li> <p>Django is a mature, synchronous by default framework, that is extremely secure and comes with its own ORM that is relatively simple to use when compared to SQLAlchemy as well as an out the box admin panel. However it is more suited to monolithic applications and will be less performant when compared to FastAPI in supporting many concurrent users.</p> </li> </ul> </li> <li> <p>Go &amp; Fiber / Gin</p> <ul> <li> <p>Go is an extremely fast concurrent language that is compiled. Offering low memory usage ideally suited for microservices ran on cloud infrastructure. However Go does not allow for exceptions and all error handling is done manually.</p> </li> <li> <p>Fiber is a lightweight framework and Gin is a popular and flexible framework. Both will integrate with Redis for caching support and PGX driver for PostgreSQL integration. However the support for ORM's and OAuth2 compliant authentication is low maturity when compared to the other options.</p> </li> </ul> </li> </ol>"},{"location":"tech_stack/","title":"Tech Stack","text":"Layer Technology Version Purpose License Operating System Ubuntu 24.04 Core software for managing computer hardware and software resources. GPL Database PostgreSQL 16 Relational database system for data storage and retrieval. PostgreSQL License Database pgAdmin4 9.1 Web-based administration tool for PostgreSQL. PostgreSQL License Server Python 3.13 Primary programming language for backend development. PSF License Server UV 0.6.3 Python package installer and resolver. MIT Server FastAPI 0.115.11 High-performance web framework for building APIs. MIT Server Resend 2.8.0 Modern email API for transactional emails. MIT Server SQLAlchemy 2.0.38 SQL toolkit and Object Relational Mapper (ORM). MIT Server asyncpg 0.30.0 Asynchronous PostgreSQL database client library. Apache 2.0 Server psycopg2-binary 2.9.10 PostgreSQL adapter for Python (binary distribution). LGPL Server Alembic 1.15.1 Database schema migration tool for SQLAlchemy. MIT Server Pydantic 2.10.6 Data validation and settings management using Python type hints. MIT Server pydantic-settings 2.8.1 Pydantic extension for managing application settings. MIT Server Authlib 1.5.1 Library for OAuth, OpenID Connect, and JWT. BSD Server psutil 7.0.0 Cross-platform library for retrieving system and process information. BSD Server structlog 25.2.0 Structured logging for Python applications. Apache 2.0 / MIT Server bcrypt 4.3.0 Library for hashing passwords securely. BSD Server email-validator 2.2.0 Library for validating email addresses. BSD Server slowapi 0.1.9 Rate limiting extension for Starlette and FastAPI. MIT Server uvicorn 0.34.0 ASGI server for running Python web applications. BSD Server opentelemetry-api 1.32.0 API for OpenTelemetry, enabling application observability. Apache 2.0 Server opentelemetry-sdk 1.32.0 SDK for OpenTelemetry, providing instrumentation capabilities. Apache 2.0 Server Pytest 8.3.5 Testing framework for Python. MIT Server Pytest Asyncio 0.25.3 Pytest plugin for testing asyncio code. Apache 2.0 Server Pytest Mock 3.14.0 Pytest plugin for mocking objects during tests. MIT Server Pytest X-Dist 3.6.1 Pytest plugin for distributing tests across multiple CPUs. MIT Server Pytest-cov 6.0.0 Pytest plugin for measuring code coverage. MIT Server Coverage 7.9.1 Tool for measuring code coverage of Python programs. Apache 2.0 Server HTTPX 0.28.1 Asynchronous HTTP client for Python, used for testing APIs. BSD Server AIOSQLite 0.21.0 Asynchronous SQLite driver, for in-memory testing. MIT Server Ruff 0.9.10 Extremely fast Python linter and code formatter. MIT Server MyPy 1.15.0 Static type checker for Python. MIT Server typing-extensions 4.12.2 Backported and experimental type hints for Python. PSF License Server types-psutil 7.0.0.20250218 Type hints for the psutil library. MIT Server types-pyyaml 6.0.12.20241230 Type hints for the PyYAML library. MIT Server types-python-jose 3.4.0.20250224 Type hints for the python-jose library. MIT Client TypeScript 5.7.2 Superset of JavaScript adding static typing for frontend development. Apache 2.0 Client NPM 10.9.2 Package manager for Node.js and JavaScript libraries. Artistic License 2.0 Client Node 22.14.0 JavaScript runtime environment for frontend build tools and scripts. MIT Client @hookform/resolvers 4.1.3 Resolvers for React Hook Form to integrate with validation libraries (e.g., Zod). MIT Client @radix-ui/react-accordion 1.2.11 Unstyled, accessible accordion component for React (Radix UI). MIT Client @radix-ui/react-alert-dialog 1.1.15 Unstyled, accessible alert dialog component for React (Radix UI). MIT Client @radix-ui/react-checkbox 1.3.3 Unstyled, accessible checkbox component for React (Radix UI). MIT Client @radix-ui/react-dialog 1.1.6 Unstyled, accessible dialog component for React (Radix UI). MIT Client @radix-ui/react-label 2.1.2 Unstyled, accessible label component for React (Radix UI). MIT Client @radix-ui/react-popover 1.1.6 Unstyled, accessible popover component for React (Radix UI). MIT Client @radix-ui/react-progress 1.1.2 Unstyled, accessible progress bar component for React (Radix UI). MIT Client @radix-ui/react-select 2.1.6 Unstyled, accessible select component for React (Radix UI). MIT Client @radix-ui/react-slot 1.2.3 Utility component for composing React components (Radix UI). MIT Client @radix-ui/react-switch 1.2.6 Unstyled, accessible switch component for React (Radix UI). MIT Client @tanstack/react-query 5.69.0 Data-fetching and state management library for React. MIT Client axios 1.8.4 Promise-based HTTP client for browsers and Node.js. MIT Client cmdk 1.1.1 Fast, composable command palette for React. MIT Client countries-list 3.1.1 List of countries, languages, and continents. MIT Client idb 8.0.2 Lightweight wrapper around IndexedDB with a Promise-based API. ISC Client lucide-react 0.483.0 Simply beautiful open-source icons for React. ISC Client next-themes 0.4.6 Theme management for React applications (originally for Next.js). MIT Client react 19.0.0 JavaScript library for building user interfaces. MIT Client react-dom 19.0.0 Entry point to the DOM and server renderers for React. MIT Client react-hook-form 7.54.2 Performant, flexible, and extensible forms library for React. MIT Client react-router-dom 7.4.0 Client-side routing library for React applications. MIT Client react-window 1.8.11 React components for efficiently rendering large lists and tabular data. MIT Client sonner 2.0.2 Opinionated toast component for React. MIT Client workbox-expiration 7.3.0 Workbox module for managing cache expiration. MIT Client workbox-precaching 7.3.0 Workbox module for precaching assets. MIT Client workbox-routing 7.3.0 Workbox module for request routing. MIT Client workbox-strategies 7.3.0 Workbox module for common caching strategies. MIT Client workbox-window 7.3.0 Workbox module for service worker registration and communication. MIT Client zod 3.24.2 TypeScript-first schema declaration and validation library. MIT Client @biomejs/biome 1.9.4 Fast formatter and linter for web projects. MIT OR Apache-2.0 Client @tailwindcss/vite 4.0.15 Tailwind CSS integration for Vite projects. MIT Client @testing-library/jest-dom 6.6.3 Custom Jest matchers for DOM testing. MIT Client @testing-library/react 16.3.0 Utilities for testing React components. MIT Client @testing-library/user-event 14.6.1 Utilities for simulating user events in tests. MIT Client @types/node 22.13.11 TypeScript type definitions for Node.js. MIT Client @types/react-dom 19.0.0 TypeScript type definitions for React DOM. MIT Client @types/react-window 1.8.8 TypeScript type definitions for react-window. MIT Client @vitejs/plugin-legacy 6.1.0 Vite plugin for legacy browser support. MIT Client @vitejs/plugin-react-swc 3.8.0 Vite plugin for React using SWC for fast compilation. MIT Client class-variance-authority 0.7.1 Utility for creating type-safe variant classes. MIT Client clsx 2.1.1 Tiny utility for constructing <code>className</code> strings conditionally. MIT Client globals 15.15.0 Global identifiers for JavaScript environments (used in linting). MIT Client jsdom 26.0.0 JavaScript implementation of web standards for Node.js, for testing. MIT Client msw 2.7.3 Mock Service Worker for API mocking in development and testing. MIT Client tailwind-merge 3.0.2 Utility for merging Tailwind CSS classes without style conflicts. MIT Client tailwindcss 4.0.15 Utility-first CSS framework for rapid UI development. MIT Client tw-animate-css 1.2.4 Tailwind CSS plugin for Animate.css animations. MIT Client typescript-eslint 8.24.1 ESLint tooling for TypeScript. MIT Client vite 6.3.2 Next-generation frontend tooling for fast development and optimized builds. MIT Client vite-imagetools 7.0.5 Vite plugin for transforming and optimizing images. MIT Client vite-plugin-compression 0.3.1 Vite plugin for compressing assets (e.g., gzip, brotli). MIT Client vite-plugin-pwa 0.21.2 Vite plugin for Progressive Web App generation. MIT Client vitest 3.1.1 Blazing fast unit test framework powered by Vite. MIT Client @vitest/coverage-v8 3.1.1 Coverage provider for Vitest using V8's built-in code coverage. MIT Client @vitest/ui 3.2.4 UI for Vitest test runner with interactive test exploration. MIT Deployment Docker Platform for developing, shipping, and running applications in containers. Apache 2.0 Deployment Render Cloud platform for hosting web applications, databases, and static sites. Proprietary Deployment GitHub Platform for version control and collaboration using Git. Proprietary Deployment GitHub Actions Automation platform for CI/CD workflows within GitHub. Proprietary"}]}